//import java.awt.GridLayout;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * This class serves as the main Frame of the quiz GUI and contains a JTabbedPane with multiple JPanels of varying functionality
 * inheriting from the standard JPanel class and multiple global JComponents.
 */
public class MultiQuizFrame extends JFrame{
    /**
     * The questions ArrayList contains Question objects that are used to populate the JPanel inheriting Panes.
     */
    private final ArrayList<Question> questions;
    /**
     * The QuizPanels organizes the JPanel inheriting Panes and regular JPanes into a Tabbed GUI format, allowing to click between the tabs and
     * store intermediate values.
     */
    private final JTabbedPane QuizPanels;
    /**
     * The qRadio is an instantiated RadioPane inheriting from JPanel that displays the question in radioButton format.
     */
    private RadioPane qRadio;
    /**
     * The qCheck is an instantiated CheckBoxPane inheriting from JPanel that displays the question in a CheckBoxMenu containing CheckBoxMenuItems.
     */
    private CheckBoxPane qCheck;
    /**
     * The qText is an instantiated TextBoxPane inheriting from JPanel that displays the question and takes input using a JTextBox.
     */
    private TextBoxPane qText;
    /**
     * The qText2 is an instantiated TextBoxPane inheriting from JPanel that displays the question and takes input using a JTextBox.
     */
    private TextBoxPane qJText2;
    /**
     * The qJList is an instantiated JListPane inheriting form JPanel that displays the question and takes the input using a JList.
     */
    private JListPane qJList;
    /**
     * The global quiz JLabel welcomeLabel serves as the title that is displayed on the welcome tab.
     */
    private JLabel welcomeLabel;
    /**
     * The global JButton startQuizButton serves as the button that starts the quiz.
     */
    private final JButton startQuizButton;
    /**
     * The global JButtons submitQuizButtonStart and submitQuizButtonEnd serves as the buttons that submits the quiz and starts the result phase.
     */
    private JButton submitQuizButtonStart, submitQuizButtonEnd;
    /**
     * The global JCheckBox acknowledgementBoxStart and acknowledgementBoxEnd serves as the buttons for the user to sign that they did not cheat and be able to submit their quiz results
     */
    private JCheckBox acknowledgementBoxStart, acknowledgementBoxEnd;
    /**
     * The global ButtonHandler buttonHandler that handles the events generated by the global JComponents.
     */
    private final ButtonHandler buttonHandler;
    /**
     * The ArrayList questionsAnswered contains Booleans that based on their index specify whether or not an answer has been provided.
     */
    private ArrayList<Boolean> questionsAnswered = new ArrayList<>();
    /**
     * The Integer numCorrect is the number of questions of the quiz that were answered correctly by the user.
     */
    private Integer numCorrect = 0;
    /**
     * The Boolean populated represents whether or not the quiz Panes have been populated with questions and have been added to the JTabbedPane
     */
    private Boolean populated;
    /**
     * The Boolean displayedResult represents whether or not the quiz Results have been displayed in a new Pane and added to the JTabbedPane
     */
    private Boolean displayedResult = false;

    /**
     * The Constructor sets up the welcome Quiz Panel by initializing certain member variables and creating a title Label and a start quiz JButton,
     * .It also takes in an ArrayList of Question objects that will be used to populate question Panes.
     * @param questions an array of Question objects that will be loaded into specific JPanes inheriting from JPanel based upon question type
     */
   public MultiQuizFrame(ArrayList<Question> questions) {
       super("Car Quiz");
       QuizPanels = new JTabbedPane();
       this.questions = questions;
       populated = false;


       this.welcomeLabel = new JLabel("Welcome to Gowda's Car Quiz\n");
       welcomeLabel.setToolTipText("Car Quiz Tool Tip");
       JPanel startPanel = new JPanel();
       startPanel.add(welcomeLabel);
       startPanel.setBackground(Color.pink);

       Icon wOutlineCar = resizeImgToIcon(75, 75, "car_woutline.png");
       Icon nOutlineCar = resizeImgToIcon(75, 75, "car_noutline.png");

       startQuizButton = new JButton("Start Button", nOutlineCar);
       startQuizButton.setRolloverIcon(wOutlineCar);
       startQuizButton.setBackground(Color.LIGHT_GRAY);
       buttonHandler = new ButtonHandler();
       startQuizButton.addActionListener(buttonHandler);
       startPanel.add(startQuizButton, BorderLayout.SOUTH);

       submitQuizButtonStart = new JButton("Submit");
       submitQuizButtonStart.setVisible(false);
       submitQuizButtonStart.addActionListener(buttonHandler);
       startPanel.add(submitQuizButtonStart);

       acknowledgementBoxStart = new JCheckBox("Check to verify that the answers are your own work");
       acknowledgementBoxStart.setVisible(false);
       acknowledgementBoxStart.addActionListener(buttonHandler);
       acknowledgementBoxStart.setBackground(Color.CYAN);
       startPanel.add(acknowledgementBoxStart);

       QuizPanels.addTab("Welcome Page", null, startPanel, "Welcome Panel");


       add(QuizPanels);
   }

    /**
     * The resizeImgtoIcon() method takes a filename corresponding to a png and resizes it to the dimensions width and height specified
     * in the function parameters.
     * @param width new image width
     * @param height new image height
     * @param filename name of image to be resized
     * @return returns the Icon object of the resized image
     */
   public Icon resizeImgToIcon(int width, int height, String filename)
   {
       ImageIcon ogIcon = new ImageIcon(getClass().getResource(filename));
       Image ogimg = ogIcon.getImage();
       ogimg = ogimg.getScaledInstance(width, height, Image.SCALE_SMOOTH);
       return new ImageIcon(ogimg);

   }

    /**
     * The populateQuestions() method initializes the Pane member variables inheriting from JPanel by passing them the relevant data
     * from the corresponding Question object. The JButton submitQuizButtonStart is initialized and set to not visible and the Panes
     * and button object are added to the JTabbedPane.
     * submitQuizButtonEnd member var
     */
   public void populateQuestions()
   {
       qRadio = new RadioPane(1, questions.get(0).getScrambledOutput().length);
       qRadio.createQuestions(questions.get(0));

       qCheck = new CheckBoxPane(2, questions.get(1).getScrambledOutput().length);
       qCheck.createQuestions(questions.get(1));

       qText = new TextBoxPane(3);
       qText.createQuestion(questions.get(2));

       qJText2 = new TextBoxPane(4);
       qJText2.createQuestion(questions.get(3));

       qJList = new JListPane(5);
       qJList.createQuestion(questions.get(4));

       submitQuizButtonEnd = new JButton("Submit Quiz");
       submitQuizButtonEnd.setVisible(false); //should be false
       submitQuizButtonEnd.addActionListener(buttonHandler);
       qJList.add(submitQuizButtonEnd); //add it to the JListPanel

       acknowledgementBoxEnd = new JCheckBox("Check to verify that the answers are your own work");
       acknowledgementBoxEnd.setVisible(false);
       acknowledgementBoxEnd.addActionListener(buttonHandler);
       qJList.add(acknowledgementBoxEnd);

       QuizPanels.addTab("Question 1", null, qRadio, "Question 1 Panel");
       QuizPanels.addTab("Question 2", null, qCheck, "Question 2 Panel");
       QuizPanels.addTab("Question 3", null, qText, "Question 3 Panel");
       QuizPanels.addTab("Question 4", null, qJText2, "Question 4 Panel");
       QuizPanels.addTab("Question 5", null, qJList, "Question 5 Panel");
   }

    /**
     * The NextPanel() method moves the selected tab of the JTabbedPane to the next Pane based upon the index.
     */
   public void NextPanel()
   {
       QuizPanels.setSelectedIndex(QuizPanels.getSelectedIndex() + 1); //there should be no next button in the last question, only a submit button
   }

    /**
     * The checkAllQuestionsAnswered method checks to see if the user has answered all of the question JPanes inheriting from JPanel.
     * If all area answered it return true, if not it return false
     * @return true if all questions answered, false if they are not
     */
   public Boolean checkAllQuestionsAnswered()
   {
       for(int i =0; i < questionsAnswered.size(); i++)
       {
           if(!questionsAnswered.get(i))
           {
               return false;
           }
       }
       return true;
   }

    /**
     * The gradeQuizQuestions() method takes in a Question object question and the String userAnswer as argument and checks if the
     * userAnswer is equal to the Question object's correct answer, if it is it increments numCorrect and returns true, if not it
     * simply returns false;
     * @param question a Question object
     * @param userAnswer the answer provided by the user to the Question object
     * @return returns true if user answer matches the Question object's correct answer, or false if not
     */
   public Boolean gradeQuizQuestions(Question question, String userAnswer)
   {
       String[] multiUserAnswers;
       String[] correctAnswers = question.getAnswers();

       if(question.getAnswers().length > 1)
       {
           multiUserAnswers = userAnswer.split("\n");
           Arrays.sort(correctAnswers);
           Arrays.sort(multiUserAnswers);

           if(Arrays.equals(multiUserAnswers, correctAnswers))
           {
               numCorrect++;
               return true;
           }
       }
       else {
           if(userAnswer.toLowerCase().equals(question.getAnswers()[0].toLowerCase()))
           {
               numCorrect++;
               return true;
           }
       }
       return false;
   }

    /**
     * RadioPane inherits from JPanel and is the Panel for RadioButton style questions. Contains a JLabel questionLabel for the text of
     * the question a standard JButton nextbutton to move through the JTabbedPanel tabs, and an array of JRadioButtons.
     */
   private class RadioPane extends JPanel{
        /**
         * The JLabel questionLabel contains the text of the question body.
         */
       private final JLabel questionLabel; // contains text of the question
        /**
         * The JButton nextButton serves to change the selected Tab of the JTabbedPane to the next index value
         */
       private final JButton nextButton; // standard next panel button
        /**
         * The JRadioButton[] radioButton is an array of the JRadioButtons corresponding to the possible answers of the question.
         */
       private JRadioButton[] radioButtons; // array of JRadioButtons
        /**
         * The ButtonGroup radioGroup contains the JRadioButtons corresponding to the possible answers of the question, and serves
         * to make only one of the JRadioButtons able to selected at a given time.
         */
       private final ButtonGroup radioGroup; // ButtonGroup of JRadioButtons to ensure single radio button selected
        /**
         * The String userAnswer is the text of the JRadioButton that the user has selected as their answer
         */
        private String userAnswer;
        /**
         * The Boolean answerProvided corresponds to whether or not a given JRadioButton answer selection is selected, if one is selected
         * it is set to true, if one is not it is set to false;
         */
        private Boolean answerProvided;
        /**
         * The Boolean isCorrect corresponds to whether or not the answer selected by the user is equal to the actual answer of
         * the specific question.
         */
        private Boolean isCorrect;
        /**
         * The int questionNumber corresponds to the position of the RadioPane in the JTabbedPanel
         */
        private int questionNumber;

        /**
         * Getter method that returns the JButton nextButton
         * @return returns nextButton
         */
       private JButton getNextButton()
       {
          return nextButton;
       }

        /**
         * Getter function that returns the Boolean anwswerProvided
         * @return returns answerProvided
         */
        public Boolean getAnswerProvided() {
            return answerProvided;
        }

        /**
         * Setter function that sets Boolean answerProvided
         * @param answerProvided Boolean of whether or not the question has been answered
         */
        public void setAnswerProvided(Boolean answerProvided) {
            this.answerProvided = answerProvided;
        }

       /*
       * 1 constructor which takes in a int question number, to display in the tab title. Creates a Panel with a question
       * label, one next button, and 4 radio buttons. */

        /**
         * The RadioPane constructor takes an Integer questionNum and an Integer numRadioButtons and gives the RadioPane a
         * questionLabel corresponding to the question text, a nextButton to change to the next tab, and makes radioButtons of the amount
         * specified by numRadioButtons.
         * @param questionNum the numeric value of the tab number of the pane in the JTabbedPane
         * @param numRadioButtons thenumber of radio buttons that should be generated
         */
       public RadioPane(Integer questionNum, Integer numRadioButtons) //pass in the number of options too
       {
           setLayout(new FlowLayout());
           RadPaneButtonhandler radbuttonhandler = new RadPaneButtonhandler();
           answerProvided = false;
           questionNumber = questionNum - 1;
           questionsAnswered.add(questionNumber, false);

           questionLabel = new JLabel("");
           questionLabel.setToolTipText("Question " + questionNum.toString() + "Tool Tip");
           add(questionLabel);

           Icon qnoutlinecar = resizeImgToIcon(75, 75, "q2car_noutline.png");
           Icon qwoutlinecar = resizeImgToIcon(75, 75, "q2car_woutline.png");
           nextButton = new JButton("Next", qnoutlinecar);
           nextButton.setBackground(Color.LIGHT_GRAY);
           nextButton.setRolloverIcon(qwoutlinecar);
           nextButton.addActionListener(radbuttonhandler);

           radioGroup = new ButtonGroup();
           radioButtons = new JRadioButton[numRadioButtons]; //why 5? maybe 4?
           for(int i = 0; i < numRadioButtons; i++)
           {
               radioButtons[i] = new JRadioButton();
               //TODO: add the event handler to the buttons or the button group?
                    //TODO: should I have a itemlistener or an actioneventlistener?
               radioButtons[i].addActionListener(radbuttonhandler);

               add(radioButtons[i]);
               radioGroup.add(radioButtons[i]);

           }
           add(nextButton);
       }

        /**
         * The createQuestions method takes in a Question question and populates the text of JRadioButtons in the radioButtons array with the scrambled
         * output of the Question object.
         * @param question a Question object that is used to populate the Pane
         */
       public void createQuestions(Question question)
       {
           questionLabel.setText(question.getQuestionText());
           for(int i = 0; i < question.getScrambledOutput().length; i++) //
           {
               radioButtons[i].setText(question.getScrambledOutput()[i]);
           }

       }

        /**
         * The RadPaneButton handler inherits from ActionListner class handles the actionEvents generated by the JButtons of the RadioPane class,
         * which range from the nextButton being pushed, or a RadioButton of the RadioButtons array being selected
         */
       private class RadPaneButtonhandler implements ActionListener
       {
           /**
            * the actionPerformed method method overriden from the base class ActionListner. An ActionEvent e is passed as a parameter, and
            * if the ActionEvent source is the nextButton the panel changes to next. If a button from the radioGroup is selected then set answerProvided
            * to true and set the userAnswer.
            * @param e the event to be processed
            */
           @Override
           public void actionPerformed(ActionEvent e) {
               if(e.getSource() == nextButton)
               {
                   NextPanel();
               }
               if(radioGroup.getSelection() != null)
               {
                   answerProvided = true;
                   questionsAnswered.set(questionNumber, true);
                   for(int i = 0; i < radioButtons.length; i++)
                   {
                       if(radioButtons[i].isSelected())
                       {
                           userAnswer = radioButtons[i].getText();
                       }
                   }
                   //add to the progress bar, plus the submit button will check if answerProvided is true for all
               }
               if(checkAllQuestionsAnswered())
               {
                   submitQuizButtonStart.setVisible(true);
                   submitQuizButtonEnd.setVisible(true);
                   acknowledgementBoxStart.setVisible(true);
                   acknowledgementBoxEnd.setVisible(true);
               }
           }
       }
   }

    /**
     * The class CheckBoxPane inherits from JPanel and is the Panel for CheckBox style questions. The CheckBoxPane contains a checkBoxMenu containing
     * checkBoxBar and JCheckBoxMenuItems, as well as JButton nextButton, JLabel questionLabel. The CheckBoxPane also contains it's own event handler implementing
     * ActionListener.
     */
   private class CheckBoxPane extends JPanel
    {
        /**
         * The JMenu checkBoxMenu serves as the Object to select answer options which are in the form of JCheckBoxMenuItems.
         */
        private final JMenu checkBoxMenu;
        /**
         * The JMenuBar checkBoxBar serves as the object to display the JCheckBoxManuItems in a dropdown menu format
         */
        private final JMenuBar checkBoxBar;
        /**
         * The JButton nextButton serves as the JButton object to change the selected Pane of the JTabbedPane to the next index
         */
        private final JButton nextButton;
        /**
         * The JLabel questionLabel serves as the JLabel to display the question text body on the Panel
         */
        private final JLabel questionLabel;
        /**
         * The JCheckBoxMenuItem[] checkBoxes array contains the JCheckBoxMenuItems that contains the answer options for the question.
         */
        private final JCheckBoxMenuItem[] checkBoxes;
        /**
         * The int questionNumber corresponds to the CheckBoxPane's tab number in the JtabbedPane.
         */
        private int questionNumber;
        /**
         * The String userAnswer is the text of the JCheckBoxMenuItem that the user has selected
         */
        private String userAnswer;
        /**
         * The Boolean answerProvided corresponds to whether or not there is a JCheckBoxMenuItem in the JCheckBoxMenu that is actively
         * been selected.
         */
        private Boolean answerProvided;
        /**
         * The Boolean isCorrect corresponds to whether or not the text JCheckBoxMenuItems selected by the user is to the same as the
         * correct answers of the Question object for that question.
         */
        private Boolean isCorrect;

        /**
         * Getter getAnswerProvided() method for the answerProvided member variable.
         * @return retuns answerProvided
         */
        public Boolean getAnswerProvided() {
            return answerProvided;
        }

        /**
         * Setter setAnswerProvided() sets the answerProvided member variable
         * @param answerProvided Boolean representing whether or not the answer is provided
         */
        public void setAnswerProvided(Boolean answerProvided) {
            this.answerProvided = answerProvided;
        }

        /**
         * The Constructor CheckBoxPane() takes in arguments Integer questionNum and an Integer numCheckBoxes and generates the CheckBoxPane for
         * it's corresponding Question object. Specifically a JLabel questionLabel, a JButton nextButton, a JMenuBar containing a JMenu with JCheckListMenuItems
         * are generated and added to the Pane.
         * @param questionNum numeric value corresponding to the tab number in the JTabbedPane
         * @param numCheckBoxes the number of checkboxes that should be generated
         */
        public CheckBoxPane(Integer questionNum, Integer numCheckBoxes)
        {
            setLayout(new FlowLayout());
            CheckBoxPaneHandler checkhandler = new CheckBoxPaneHandler();
            answerProvided = false;
            questionNumber = questionNum - 1;
            questionsAnswered.add(questionNumber, false);

            questionLabel = new JLabel("");
            questionLabel.setToolTipText("Question " + questionNum.toString() + " Tool Tip");

            Icon qnoutlinecar = resizeImgToIcon(75, 75, "q4car_noutline.png");
            Icon qwoutlinecar = resizeImgToIcon(75, 75, "q4car_woutline.png");
            nextButton = new JButton("Next", qnoutlinecar);
            nextButton.setBackground(Color.LIGHT_GRAY);
            nextButton.setRolloverIcon(qwoutlinecar);
            nextButton.addActionListener(checkhandler);

            //replace the button group with a JCheckBoxMenu --> make it easier to check if something is selected

            checkBoxBar = new JMenuBar();
            checkBoxMenu = new JMenu();
            checkBoxes = new JCheckBoxMenuItem[numCheckBoxes];

            for(int i = 0; i < numCheckBoxes; i++)
            {
                JCheckBoxMenuItem checkBoxMenuItem = new JCheckBoxMenuItem("", false);
                checkBoxMenuItem.addActionListener(checkhandler);
                checkBoxes[i] = checkBoxMenuItem;
                checkBoxMenu.add(checkBoxMenuItem);
            }
            checkBoxBar.add(checkBoxMenu);

            add(questionLabel);
            add(checkBoxBar);
            add(this.nextButton);
        }

        /**
         * The createQuestions() method takes a Question question and loads the JLabel questionLabel object with the question body
         * and loads the JCheckBoxMenuItems to the answer options.
         * @param question a Question object with details of the question
         */
        public void createQuestions(Question question)
        {
            questionLabel.setText(question.getQuestionText());
            for(int i = 0; i < question.getScrambledOutput().length; i++)
            {
                checkBoxMenu.getItem(i).setText(question.getScrambledOutput()[i]);
            }
        }

        /**
         * The CheckBoxPaneHandler class implements the ActionListener class and handles the events for the JPanel CheckBoxPane's JComponenets,
         * including the nextButton and the JMenu.
         */
        private class CheckBoxPaneHandler implements ActionListener
        {
            /**
             * The actionPerformed method overrides the one provided by the ActionListener interface. It takes an ActionEvent e as a parameter and if
             * the nextButton generated the event then the nextPanel() method is called. Add all the selected checkBoxMenuItems to the userAnswer
             * member variable.
             * @param e the event to be processed
             */
            @Override
            public void actionPerformed(ActionEvent e) {
                if(e.getSource() == nextButton)
                {
                    NextPanel();
                }
                userAnswer = "";
                Boolean tempAnswered = false;
                StringBuffer userAnswerBuffer = new StringBuffer();
                for(int i = 0; i < checkBoxes.length; i++)
                {
                    if (checkBoxes[i].isSelected())
                    {
                        tempAnswered = true;
                        userAnswerBuffer.append(checkBoxes[i].getText());
                        if(i != checkBoxes.length - 1)
                        {
                            userAnswerBuffer.append("\n");
                        }
                    }
                }
                questionsAnswered.set(questionNumber, tempAnswered);
                userAnswer = userAnswerBuffer.toString();

                if(checkAllQuestionsAnswered())
                {
                    submitQuizButtonStart.setVisible(true);
                    submitQuizButtonEnd.setVisible(true);
                    acknowledgementBoxStart.setVisible(true);
                    acknowledgementBoxEnd.setVisible(true);
                }
            }
        }

    }

    /**
     * The TextBoxPane inherits from JPanel and is the Panel for the TextBox style questions. The TextBoxPane contains a the JComponenets
     *  JTextField textBox, JButtons nextButton and submitTextBox, and JLabel questionLabel. It also contains a ActionListener textBoxHandler
     *  that deals with events generated by its JComponents.
     */
    private class TextBoxPane extends JPanel
    {
        /**
         * The JButton nextButton and submitTextBox change the selectedTab to the next index and submit the contents entered into
         * the JTextField, respectively.
         */
        private final JButton nextButton, submitTextBox;
        /**
         * The JLabel questionLabel contains the question text of the respective Question object.
         */
        private final JLabel questionLabel;
        /**
         * The JTextField textBox serves as the Object for users to input their answers to the question.
         */
        private final JTextField textBox;
        /**
         * The TextBoxHandler textBoxHandler implements the ActionListener interface and handles the ActionEvents generated by the TextBonePane
         */
        private final TextBoxHandler textBoxHandler;
        /**
         * The int questionNumber is corresponds to the tab number in the JTabbedPane.
         */
        private int questionNumber;
        /**
         * The String userAnswer corresponds to the test the user entered into the JTextField textBox.
         */
        private String userAnswer;
        /**
         * The Boolean answerProvided corresponds to whether or not the user has entered text into the JTextField and submitted the answer, if
         * they have it is set to true. If not it is set ot false.
         */
        private Boolean answerProvided;
        /**
         * The Boolean isCorrect corresponds to whether or not the text user entered is equal to the correct answer for the Question
         *  object, if it is it is set to true, if not it is set to false
         */
        private Boolean isCorrect;

        /**
         * Getter for answerProvided
         * @return returns answerProvided
         */
        public Boolean getAnswerProvided() {
            return answerProvided;
        }

        /**
         * Setter for answerProvided
         * @param answerProvided Boolean corresponding to whether or not an answer is provided
         */
        public void setAnswerProvided(Boolean answerProvided) {
            this.answerProvided = answerProvided;
        }

        /**
         * The TextBoxPane() constructor takes the arguement Integer questionNum, and generates the JComponents JButton nextButton
         * JTextBox submitTextBox, and the JLabel questionLabel. These JComponents are then added to the TextBoxPane.
         * @param questionNum the numeric value corresponding to the tab number in the JTabbedPane
         */
        public TextBoxPane(Integer questionNum)
        {
            setLayout(new FlowLayout());
            textBoxHandler = new TextBoxHandler();
            answerProvided = false;
            questionNumber = questionNum - 1;
            questionsAnswered.add(questionNumber, false);

            questionLabel = new JLabel("");
            questionLabel.setToolTipText("Question " + questionNum.toString() + " Tool Tip");

            Icon qnoutlinecar = resizeImgToIcon(75, 75, "q3car_noutline.png");
            Icon qwoutlinecar = resizeImgToIcon(75, 75, "q3car_woutline.png");
            nextButton = new JButton("Next", qnoutlinecar);
            nextButton.setBackground(Color.LIGHT_GRAY);
            nextButton.setRolloverIcon(qwoutlinecar);
            nextButton.addActionListener(textBoxHandler);


            submitTextBox = new JButton("Enter");
            submitTextBox.addActionListener(textBoxHandler);
            textBox = new JTextField(16);

            add(questionLabel);
            add(textBox);
            add(submitTextBox);
            add(nextButton);
        }

        /**
         * The createQuestion() method populates the JLabel questionLabel with the corresponding Question object question body text.
         * @param question Question object with the question details
         */
        public void createQuestion(Question question)
        {
            questionLabel.setText(question.getQuestionText());
        }

        /**
         * The TextBoxHandler class implements the ActionListener interface and overrides the actionPerformed method of the
         * ActionListener interface. The TextBoxHandler handles the ActionEvents generated by the TextBoxHandler's JComponents.
         */
        private class TextBoxHandler implements ActionListener
        {
            /**
             * The actionPerformed() method overrides the interface ActionListener actionPerformed() method and call NextPanel(),
             * reads in the input form the JTextBox if the submitTextBox is pressed.
             * @param e the event to be processed
             */
            @Override
            public void actionPerformed(ActionEvent e) {
                if(e.getSource() == nextButton)
                {
                    NextPanel();
                }
                if(e.getSource() == (submitTextBox))
                {
                    answerProvided = true;
                    questionsAnswered.set(questionNumber, true);
                    userAnswer = textBox.getText();
                    textBox.setVisible(false);
                    submitTextBox.setVisible(false);
                }
                if(checkAllQuestionsAnswered())
                {
                    submitQuizButtonStart.setVisible(true);
                    submitQuizButtonEnd.setVisible(true);
                    acknowledgementBoxStart.setVisible(true);
                    acknowledgementBoxEnd.setVisible(true);
                }
            }
        }
    }

    /**
     * The JListPane class inherits from JPanel and serves as the JPanel for JList style questions. It contains the JComponenets
     * 2 JLists fromList and toList, 2 JButtons moveListRightButton and resetRightButton. It also contains a JListPanelButtonHandler
     *  ActionListener and a JListPanelSelectionHandler ListSelectionListener.
     */
    private class JListPane extends JPanel
    {
        /**
         * The JLabel questionLabel contains the question text body from the corresponding Question object.
         */
        private final JLabel questionLabel;
        /**
         * The JLists fromList houses the possible answer selection and the JList toList will house the user's selected answers chosen
         * from the fromList.
         */
        private final JList<String> fromList, toList;
        /**
         * The JButton moveListRightButton moves the selected values form the fromList to the toList and the JButton resetRightList
         * clears the contents of the toList so the user can re-add selected items.
         */
        private final JButton moveListRightButton, resetRightList;
        /**
         * The JListPanelSelectionHandler jListPanelHandler implements the ListSelectionListener interface and checks for changes in selection states
         * of the fromList.
         */
        private final JListPanelSelectionHandler jListPanelHandler;
        /**
         * The JListPanelButtonHandler jListPanelButtonHandler implements the ActionListener interface and deals with ActionEvents generated
         * by the moveListRightButton and the resetRightList JButtons.
         */
        private final JListPanelButtonHandler jListPanelButtonHandler;
        /**
         * The ArrayList answersSelected contains the String items selected by the user from the JList fromList.
         */
        private ArrayList<String> answersSelected = new ArrayList<>();
        /**
         * The int questionNumber corresponds to the tab number of the JTabbedPane.
         */
        private int questionNumber;
        /**
         * The String userAnswer corresponds to the elements of the ArrayList answersSelected joined together by a newline character.
         */
        private String userAnswer;
        /**
         * The Boolean answerProvided is true if the user has selected an item from the JList fromList, and is false if nothing is
         * selected.
         */
        private Boolean answerProvided;
        /**
         * The Boolean isCorrect corresponds to true if the String userAnswer is equal to the corresponding Question object's correct
         * answer.
         */
        private Boolean isCorrect;

        /**
         * Getter for answerProvided
         * @return returns answerProvided
         */
        public Boolean getAnswerProvided() {
            return answerProvided;
        }

        /**
         * Setter for answerProvided
         * @param answerProvided Boolean corresponding to whether or not the user provided an answer
         */
        public void setAnswerProvided(Boolean answerProvided) {
            this.answerProvided = answerProvided;
        }

        /**
         * The JListPane() constructor creates the JComponents JLabel questionLabel, the JLists fromList and toList, the JButtons
         *  moveListRightButton and resetRightButton. Then adds the JComponents to the JListPane
         * @param questionNum numeric value corresponding to the tab number in the JTabbedPane
         */
        public JListPane(Integer questionNum)
        {
            setLayout(new FlowLayout());
            jListPanelHandler = new JListPanelSelectionHandler();
            jListPanelButtonHandler = new JListPanelButtonHandler();


            answerProvided = false;
            questionNumber = questionNum - 1;
            questionsAnswered.add(questionNumber, false);

            questionLabel = new JLabel("");
            questionLabel.setToolTipText("Question " + questionNum.toString() + " Tool Tip");

            fromList = new JList<>();
            toList = new JList<>();
            fromList.setVisibleRowCount(10);
            toList.setVisibleRowCount(10);
            fromList.setPrototypeCellValue(String.format("%60s", ""));
            toList.setPrototypeCellValue(String.format("%60s", ""));
            fromList.addListSelectionListener(jListPanelHandler);

            fromList.setDragEnabled(true);
            fromList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

            moveListRightButton = new JButton("Move Right");
            moveListRightButton.setVisible(false);
            moveListRightButton.addActionListener(jListPanelButtonHandler);

            resetRightList = new JButton("Reset");
            resetRightList.setVisible(false);
            resetRightList.addActionListener(jListPanelButtonHandler);

            //TODO: Get the add() order right so that they are added in the correct order
            add(questionLabel);
            add(new JScrollPane(fromList));
            add(new JScrollPane(toList));
            add(moveListRightButton);
            add(resetRightList);
        }

        /**
         * The createQuestion() method takes the corresponding Question object and sets the JLabel questionLabel equal
         * to the Question object's text body, and initializes the Jlist fromList to the Question objects scrambled output
         * @param question Question object with the details of the question
         */
        public void createQuestion(Question question)
        {
            questionLabel.setText(question.getQuestionText());
            fromList.setListData(question.getScrambledOutput());
        }

        /**
         * The JListPanelSelectionHandler implements the ListSelectionListener interface and handles the LisSelectionEvents generated by the JList
         * fromList. If a ListSelectionHandler event is generated the buttons resetRightList and moveListRightButton become visible.
         */
        private class JListPanelSelectionHandler implements ListSelectionListener
        {
            @Override
            public void valueChanged(ListSelectionEvent e) {

                // From StackOverFlow, author: Vinay
                Boolean isAdjusting = e.getValueIsAdjusting();
                if(!isAdjusting)
                {
                    JList listFromEvent = (JList) e.getSource();
                    int selections[] = listFromEvent.getSelectedIndices();
                    Object selectionValues[] = listFromEvent.getSelectedValues();
                    if(selections.length > 0 && !answerProvided)
                    {
                        resetRightList.setVisible(true);
                        moveListRightButton.setVisible(true);
                    }
                }
            }
        }

        /**
         * The JListPanelButtonHandler implements the ActionListener interface and handles events from the moveListRightButton and the resetRightList.
         */
        private class JListPanelButtonHandler implements ActionListener
        {
            /**
             * The actionPerformed() method is an overriden method of the ActionListener interface. If the source of the ActionEvent is the
             * moveListRightButton the selectedItems of the fromList are loaded to DefaultListModel and then the toList's model is set
             * to this newly generated model. If the source resetRightList is the source of the
             * @param e the event to be processed
             */
            @Override
            public void actionPerformed(ActionEvent e) {
                if(e.getSource() == moveListRightButton)
                {
                    userAnswer = "";
                    Object selectionValues[] = fromList.getSelectedValues();
                    toList.setListData(new String[] {});
                    DefaultListModel listModel = new DefaultListModel();
                    StringBuffer userchoice = new StringBuffer();

                    for (int i = 0; i < selectionValues.length; i++)
                    {
                        listModel.addElement(selectionValues[i]);
                        if(i != selectionValues.length - 1)
                        {
                            userchoice.append(selectionValues[i]);
                            userchoice.append("\n");
                        }
                        else
                        {
                            userchoice.append(selectionValues[i]);
                        }
                    }

                    userAnswer = userchoice.toString();
                    toList.setModel(listModel);
                    answerProvided = true;
                    questionsAnswered.set(questionNumber, true);
                    if(checkAllQuestionsAnswered())
                    {
                        submitQuizButtonStart.setVisible(true);
                        submitQuizButtonEnd.setVisible(true);
                        acknowledgementBoxStart.setVisible(true);
                        acknowledgementBoxEnd.setVisible(true);
                    }
                }

                if(e.getSource() == resetRightList)
                {
                    toList.setListData(new String[] {});
                    toList.setVisibleRowCount(10);
                    answersSelected.clear();
                }
            }
        }
    }

    /**
     * The global ButtonHandler implements the ActionListener interface and deals with the ActionEvents generated by the global JComponents.
     */
    private class ButtonHandler implements ActionListener
       {
           /**
            * The actionPerformed() method is an overriden method from the ActionListener interface. If the source fo the ActionEvent is the startQuizButton the
            * populateQuestion method is called. If source is either  submitQuiz buttons (submitQuizButtonStart or submitQuizButtonEnd) the results of the quiz
            * are calculated loaded into a JPanel and output to the JTabbedPane.
            * @param event the event to be processed
            */
           @Override
           public void actionPerformed(ActionEvent event)
           {
               if(!populated & event.getSource() == startQuizButton)
               {
                   populateQuestions();
                   QuizPanels.setSelectedIndex(1);
                   populated = true;
               }

               if((event.getSource() == submitQuizButtonStart || event.getSource() == submitQuizButtonEnd) && !displayedResult && (acknowledgementBoxStart.isSelected() || acknowledgementBoxEnd.isSelected()))
               {
                   displayedResult = true;
                   numCorrect = 0;
                   qRadio.isCorrect = gradeQuizQuestions(questions.get(0), qRadio.userAnswer);
                   qCheck.isCorrect = gradeQuizQuestions(questions.get(1), qCheck.userAnswer);
                   qText.isCorrect = gradeQuizQuestions(questions.get(2), qText.userAnswer);
                   qJText2.isCorrect = gradeQuizQuestions(questions.get(3), qJText2.userAnswer);
                   qJList.isCorrect = gradeQuizQuestions(questions.get(4), qJList.userAnswer);

                   JPanel resultPane = new JPanel();

                   String temp = "Your answer to question 1 was " + qRadio.isCorrect.toString() + ". The correct answer was " + Arrays.toString(questions.get(0).getAnswers())+ ".";
                   resultPane.add(new JLabel(temp));

                   temp = "Your answer to question 2 was " + qCheck.isCorrect.toString() + ". The correct answer was " + Arrays.toString(questions.get(1).getAnswers())+ ".";
                   resultPane.add(new JLabel(temp));

                   temp = "Your answer to question 3 was " + qText.isCorrect.toString() + ". The correct answer was " + Arrays.toString(questions.get(2).getAnswers())+ ".";
                   resultPane.add(new JLabel(temp));

                   temp = "Your answer to question 4 was " + qJText2.isCorrect.toString() + ". The correct answer was " + Arrays.toString(questions.get(3).getAnswers())+ ".";
                   resultPane.add(new JLabel(temp));

                   temp = "Your answer to question 5 was " + qJList.isCorrect.toString() + ". The correct answer was " + Arrays.toString(questions.get(4).getAnswers())+ ".";
                   resultPane.add(new JLabel(temp));


                   temp = "You got " + numCorrect.toString() + " correct out of 5!";
                   resultPane.add(new JLabel(temp));

                   QuizPanels.addTab("Results",null, resultPane, "Results Tab Tool Tip");
                   QuizPanels.setSelectedIndex(6);
                   submitQuizButtonStart.setVisible(false);
                   submitQuizButtonEnd.setVisible(false);
               }
           }
       }

}
